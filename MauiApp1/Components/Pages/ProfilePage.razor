@page "/profilePage"
@layout MobileLayout


<EditForm EditContext="editContext" OnValidSubmit="UpdateProfile">
    <DataAnnotationsValidator />

    <div class="page-background">
        <h1 class="title">@Localizer["Editing"]</h1>

        <div class="white-panel">
            <br />
            <label>@Localizer["Email"]</label>
            <InputText @bind-Value="userModel.Email" class="@(string.IsNullOrEmpty(userModel.Email) ? "invalid" : "")" readonly />
            <ValidationMessage For="() => userModel.Email" class="error-message" />

            <label>@Localizer["Name"]</label>
            <InputText @bind-Value="userModel.Name" class="@(string.IsNullOrEmpty(userModel.Name) ? "invalid" : "")" />
            <ValidationMessage For="() => userModel.Name" class="error-message" />

            <label>@Localizer["Phone"]</label>
            <InputText @bind-Value="userModel.Phone" />
            <ValidationMessage For="() => userModel.Phone" class="error-message" />

            <label>@Localizer["NewPass"]</label>
            <div class="password-container">
                <InputText @bind-Value="userModel.NewPassword" type="@passwordInputType" class="@(string.IsNullOrEmpty(userModel.NewPassword) ? "" : "valid")" placeholder=@Localizer["EnterNewPass"] />
                <i class="@eyeIconClass" @onclick="ToggleShowPassword"></i>
            </div>
            <ValidationMessage For="() => userModel.NewPassword" class="error-message" />

            <button class="center-button" type="submit">@Localizer["Change"]</button>
            <p class="success-message" style="text-align: center; display: @(updateSuccess ? "block" : "none");">Данные успешно обновлены</p>
            <p class="error-message" style="text-align: center; display: @(updateError ? "block" : "none");">Ошибка обновления данных</p>
        </div>
    </div>
</EditForm>

@code {
    private UserProfileModel userModel = new UserProfileModel();
    private EditContext? editContext;
    private bool showPassword = false;
    private bool updateSuccess = false;
    private bool updateError = false;

    private string passwordInputType => showPassword ? "text" : "password";
    private string eyeIconClass => showPassword ? "fa fa-eye-slash" : "fa fa-eye";

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(userModel);
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        var userProfile = await AuthService.GetUserDataAsync();
        if (userProfile == null)
        {
            NavManager.NavigateTo("/login");
            return;
        }

        userModel.Email = userProfile.Email;
        userModel.Name = userProfile.Name;
        userModel.Phone = userProfile.Phone;
    }

    private void ToggleShowPassword() => showPassword = !showPassword;

    private async Task UpdateProfile()
    {
        bool success = await AuthService.UpdateUserAsync(
            userModel.Email,
            userModel.Name,
            userModel.Phone,
            string.IsNullOrEmpty(userModel.NewPassword) ? null : userModel.NewPassword
        );

        updateSuccess = success;
        updateError = !success;
    }

}
